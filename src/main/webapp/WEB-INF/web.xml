<?xml version="1.0" encoding="utf-8" standalone="no"?>

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">

    <!-- docs: -->
    <!-- https://cloud.google.com/appengine/docs/java/endpoints/required_files#webxml -->

    <!-- see example:
    https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/appengine-java8/endpoints-v2-backend/src/main/webapp/WEB-INF/web.xml
    -->

    <!-- Objectify -->
    <filter>
        <filter-name>ObjectifyFilter</filter-name>
        <filter-class>com.googlecode.objectify.ObjectifyFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>ObjectifyFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <!-- see:
        https://github.com/objectify/objectify/issues/307
        https://stackoverflow.com/questions/27726961/how-to-resolve-you-have-not-started-an-objectify-context-in-junit
        -->
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <!-- -->
    </filter-mapping>

    <servlet>
        <!-- see: https://cloud.google.com/endpoints/docs/frameworks/legacy/v1/java/migrating -->
        <servlet-name>EndpointsServlet</servlet-name>
        <servlet-class>com.google.api.server.spi.EndpointsServlet</servlet-class>
        <init-param>
            <param-name>services</param-name>
            <param-value>
                net.cryptonomica.api.StripePaymentsAPI,
                net.cryptonomica.api.ArbitratorsAPI,
                net.cryptonomica.api.CryptonomicaUserAPI,
                net.cryptonomica.api.EthNodeAPI,
                net.cryptonomica.api.NewUserRegistrationAPI,
                net.cryptonomica.api.NotaryAPI,
                net.cryptonomica.api.UploadAPI,
                net.cryptonomica.api.PGPPublicKeyAPI,
                net.cryptonomica.api.UserSearchAndViewAPI,
                net.cryptonomica.api.VisitorAPI,
                net.cryptonomica.api.VerificationAPI,
                net.cryptonomica.api.OnlineVerificationAPI,
                net.cryptonomica.api.TestAPI,
                net.cryptonomica.api.StatisticsAPI
            </param-value>
        </init-param>
        <!--<init-param>-->
        <!--<param-name>restricted</param-name>-->
        <!--<param-value>false</param-value>-->
        <!--</init-param>-->
    </servlet>
    <servlet-mapping>
        <servlet-name>EndpointsServlet</servlet-name>
        <url-pattern>/_ah/api/*</url-pattern>
    </servlet-mapping>

    <!-- OTHER SERVLETS:  -->
    <!-- CloudStorage -->
    <!-- for video uploads -->
    <servlet>
        <servlet-name>CloudStorageServletVideo</servlet-name>
        <servlet-class>net.cryptonomica.servlets.CloudStorageServletVideo</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CloudStorageServletVideo</servlet-name>
        <url-pattern>/gcs/*</url-pattern>
    </servlet-mapping>
    <!-- for documents uploads -->
    <servlet>
        <servlet-name>CloudStorageServletDocuments</servlet-name>
        <servlet-class>net.cryptonomica.servlets.CloudStorageServletDocuments</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>CloudStorageServletDocuments</servlet-name>
        <url-pattern>/docs/*</url-pattern>
    </servlet-mapping>
    <!-- Stripe -->
    <servlet>
        <servlet-name>StripeTestServlet</servlet-name>
        <servlet-class>net.cryptonomica.payments.StripeTestServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>StripeTestServlet</servlet-name>
        <url-pattern>/StripeTestServlet</url-pattern>
    </servlet-mapping>

    <!-- CSUploadHandlerServlet -->
    <servlet>
        <servlet-name>CSUploadHandlerServlet</servlet-name>
        <servlet-class>net.cryptonomica.servlets.CSUploadHandlerServlet</servlet-class>
        <!-- https://cloud.google.com/appengine/docs/java/config/appconfig#Java_Warmup_requests -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>CSUploadHandlerServlet</servlet-name>
        <url-pattern>/cs-user-image-upload</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>IPNhandlerServlet</servlet-name>
        <servlet-class>net.cryptonomica.servlets.IPNhandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>IPNhandlerServlet</servlet-name>
        <url-pattern>/ipnhandler</url-pattern>
    </servlet-mapping>

    <!-- SendGridServlet-->
    <!-- https://github.com/sendgrid/google-java-sample-app -->
    <!-- https://cloud.google.com/appengine/docs/java/mail/sendgrid -->
    <servlet>
        <servlet-name>SendGridServlet</servlet-name>
        <servlet-class>net.cryptonomica.mail.SendGridServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SendGridServlet</servlet-name>
        <url-pattern>/_ah/SendGridServlet</url-pattern>
    </servlet-mapping>

    <!-- GAE Mail servlet-->
    <servlet>
        <servlet-name>SendCustomMessageToEmailGAE</servlet-name>
        <servlet-class>net.cryptonomica.mail.SendCustomMessageToEmailGAE</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>SendCustomMessageToEmailGAE</servlet-name>
        <url-pattern>/_ah/SendCustomMessageToEmailGAE</url-pattern>
    </servlet-mapping>


    <!-- Github Webhook -->
    <servlet>
        <servlet-name>GithubWebhookServlet</servlet-name>
        <servlet-class>net.cryptonomica.servlets.GithubWebhookServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>GithubWebhookServlet</servlet-name>
        <url-pattern>/GithubWebhookServlet/*</url-pattern>
    </servlet-mapping>

    <!-- Telegram Webhook -->
    <servlet>
        <servlet-name>TelegramWebhookServlet</servlet-name>
        <servlet-class>net.cryptonomica.servlets.TelegramWebhookServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>TelegramWebhookServlet</servlet-name>
        <url-pattern>/TelegramWebhookServlet/*</url-pattern>
    </servlet-mapping>

    <!-- For testing -->
    <servlet>
        <servlet-name>TestServlet</servlet-name>
        <servlet-class>net.cryptonomica.servlets.TestServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>TestServlet</servlet-name>
        <url-pattern>/test-servlet</url-pattern>
    </servlet-mapping>

    <!-- GAE Remote API for Java -->
    <!-- https://cloud.google.com/appengine/docs/standard/java/tools/remoteapi -->
    <!-- https://cloud.google.com/appengine/docs/java/tools/remoteapi -->
    <!-- The servlet returns an error if there is no authenticated user or the authenticated user is not an admin of
    your application, so there is no need to configure any additional security. Once you've deployed your app with
    these settings, any app with the Remote API client installed can use its services -->
    <servlet>
        <display-name>Remote API Servlet</display-name>
        <servlet-name>RemoteApiServlet</servlet-name>
        <servlet-class>com.google.apphosting.utils.remoteapi.RemoteApiServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>RemoteApiServlet</servlet-name>
        <url-pattern>/remote_api</url-pattern>
    </servlet-mapping>

    <!-- receiving mail -->
    <!-- https://cloud.google.com/appengine/docs/standard/java/mail/receiving-mail-with-mail-api -->
    <servlet>
        <servlet-name>mailhandler</servlet-name>
        <servlet-class>net.cryptonomica.servlets.MailHandlerServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>mailhandler</servlet-name>
        <url-pattern>/_ah/mail/*</url-pattern>
    </servlet-mapping>

    <!-- Force SSL for entire site -->
    <!-- (server automatically redirects the requests to the SSL port
     if you try to use HTTP ) -->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Entire Application</web-resource-name>
            <url-pattern>/*</url-pattern>
        </web-resource-collection>
        <user-data-constraint>
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>
        </user-data-constraint>
    </security-constraint>

    <security-constraint>
        <web-resource-collection>
            <web-resource-name>mail</web-resource-name>
            <url-pattern>/_ah/mail/*</url-pattern>
        </web-resource-collection>
        <auth-constraint>
            <role-name>admin</role-name>
        </auth-constraint>
    </security-constraint>

    <!-- -->
    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
        <!--<welcome-file>index.jsp</welcome-file>-->
    </welcome-file-list>


    <!-- ///////////////////// >>>>>>>>>>>>>>>>>>> NEW -->
    <!--see:
    https://github.com/GoogleCloudPlatform/java-docs-samples/blob/master/appengine-java8/endpoints-v2-backend/src/main/webapp/WEB-INF/web.xml
    -->
    <!-- Add a filter that fetches the service config from service management. -->
    <filter>
        <filter-name>endpoints-api-configuration</filter-name>
        <filter-class>com.google.api.control.ServiceManagementConfigFilter</filter-class>
    </filter>

    <!-- Add a filter that performs Endpoints logging and monitoring. -->
    <!-- [START api_management] -->
    <filter>
        <filter-name>endpoints-api-controller</filter-name>
        <filter-class>com.google.api.control.extensions.appengine.GoogleAppEngineControlFilter</filter-class>
        <init-param>
            <param-name>endpoints.projectId</param-name>
            <param-value>${endpoints.project.id}</param-value>
        </init-param>
        <init-param>
            <param-name>endpoints.serviceName</param-name>
            <param-value>${endpoints.project.id}.appspot.com</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>endpoints-api-configuration</filter-name>
        <servlet-name>EndpointsServlet</servlet-name>
    </filter-mapping>

    <filter-mapping>
        <filter-name>endpoints-api-controller</filter-name>
        <servlet-name>EndpointsServlet</servlet-name>
    </filter-mapping>
    <!-- [END api_management] -->

</web-app>
